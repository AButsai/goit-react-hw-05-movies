{"version":3,"file":"static/js/Cast.62a49605.chunk.js","mappings":"uQACA,EAAuB,wBAAvB,EAAsD,wBAAtD,EAAqF,wBAArF,EAAmH,uBAAnH,EAAiJ,wBAAjJ,EAAqL,6B,SC0CrL,EAvCkB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KACnB,OACE,8BACmB,IAAhBA,EAAKC,QACJ,sEAEA,gBAAKC,UAAWC,EAAhB,UACE,eAAID,UAAWC,EAAf,SACGH,EAAKI,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,KAAMC,EAAhC,EAAgCA,UAAhC,OACR,gBAAkBN,UAAWC,EAA7B,WACE,gBACEM,IAAKH,EAAeI,EAAAA,GAAaJ,EAAeK,EAAAA,GAChDC,IAAKL,EACLL,UAAWC,KAEb,4BACE,cAAGD,UAAWC,EAAd,SAAuBI,KACvB,eAAGL,UAAWC,EAAd,uBAAsCK,UARjCH,aCLjBQ,EAAS,UAwCf,EAtCa,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACd,GAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOf,EAAP,KAAagB,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAASE,EAAAA,GAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAmBA,OAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCAGd,8GAEuBC,EAAAA,EAAAA,IAAcP,EAASD,GAF9C,OAEUS,EAFV,OAIIN,EAAQM,EAAKtB,MACbmB,EAAUF,EAAAA,GAAAA,UALd,gDAOIE,EAAUF,EAAAA,GAAAA,UAPd,0DAHc,sBACdE,EAAUF,EAAAA,GAAAA,SADI,mCAcdM,KACC,CAACT,KAGF,gCACGI,IAAWD,EAAAA,GAAAA,UAAkB,SAACO,EAAA,EAAD,IAE7BN,IAAWD,EAAAA,GAAAA,WAAmB,SAAC,EAAD,CAAWjB,KAAMA,IAE/CkB,IAAWD,EAAAA,GAAAA,WACV","sources":["webpack://react-homework-template/./src/components/CardsCast/CardsCast.module.css?1987","components/CardsCast/CardsCast.jsx","views/CastPage/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrap\":\"CardsCast_wrap__ktv2+\",\"list\":\"CardsCast_list__EEuk9\",\"item\":\"CardsCast_item__eomlH\",\"img\":\"CardsCast_img__wRP4O\",\"name\":\"CardsCast_name__wsI73\",\"character\":\"CardsCast_character__T9vrA\"};","import PropTypes from 'prop-types';\nimport { PATH_IMAGE, DEFAULT_IMAGE } from 'helpers/helpers';\nimport s from './CardsCast.module.css';\n\nconst CardsCast = ({ cast }) => {\n  return (\n    <>\n      {cast.length === 0 ? (\n        <p>There is no information about the cast...</p>\n      ) : (\n        <div className={s.wrap}>\n          <ul className={s.list}>\n            {cast.map(({ cast_id, profile_path, name, character }) => (\n              <li key={cast_id} className={s.item}>\n                <img\n                  src={profile_path ? PATH_IMAGE + profile_path : DEFAULT_IMAGE}\n                  alt={name}\n                  className={s.img}\n                />\n                <div>\n                  <p className={s.name}>{name}</p>\n                  <p className={s.character}>Chracter: {character}</p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </>\n  );\n};\n\nCardsCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      cast_id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default CardsCast;\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { getMoviesInfo } from 'service/api';\n\nimport { Status } from 'helpers/helpers';\nimport Loader from 'components/Loader';\nimport CardsCast from 'components/CardsCast';\n\nconst PARAMS = 'credits';\n\nconst Cast = ({ movieId }) => {\n  const [cast, setCast] = useState(null);\n  const [status, setStatus] = useState(Status.IDLE);\n\n  useEffect(() => {\n    setStatus(Status.PENDING);\n\n    async function getCast() {\n      try {\n        const data = await getMoviesInfo(movieId, PARAMS);\n\n        setCast(data.cast);\n        setStatus(Status.RESOLVED);\n      } catch (_error) {\n        setStatus(Status.RESOLVED);\n      }\n    }\n\n    getCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {status === Status.PENDING && <Loader />}\n\n      {status === Status.RESOLVED && <CardsCast cast={cast} />}\n\n      {status === Status.REJECTED && (\n        <p>There is no information about the cast...</p>\n      )}\n    </>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default Cast;\n"],"names":["cast","length","className","s","map","cast_id","profile_path","name","character","src","PATH_IMAGE","DEFAULT_IMAGE","alt","PARAMS","movieId","useState","setCast","Status","status","setStatus","useEffect","getMoviesInfo","data","getCast","Loader"],"sourceRoot":""}