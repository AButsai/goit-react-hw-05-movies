{"version":3,"file":"static/js/Cast.1d0d7fd9.chunk.js","mappings":"0OACA,EAAuB,wBAAvB,EAAsD,wBAAtD,EAAqF,wBAArF,EAAmH,uBAAnH,EAAiJ,wBAAjJ,EAAqL,6B,SC6CrL,EAvCkB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KACnB,OACE,8BACmB,IAAhBA,EAAKC,QACJ,sEAEA,gBAAKC,UAAWC,EAAhB,UACE,eAAID,UAAWC,EAAf,SACGH,EAAKI,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,aAAcC,EAA1B,EAA0BA,KAAMC,EAAhC,EAAgCA,UAAhC,OACR,gBAAkBN,UAAWC,EAA7B,WACE,gBACEM,IAAKH,EAfJ,mCAegCA,EAbjD,yEAcgBI,IAAKH,EACLL,UAAWC,KAEb,4BACE,cAAGD,UAAWC,EAAd,SAAuBI,KACvB,eAAGL,UAAWC,EAAd,uBAAsCK,UARjCH,aC2BvB,EAjCa,SAAC,GAAiB,IAAfM,EAAc,EAAdA,QACd,GAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOZ,EAAP,KAAaa,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAASE,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACRD,EAAUF,EAAAA,EAAAA,UACVI,EAAAA,EAAAA,IAAcP,EARH,WASRQ,MAAK,SAAAC,GACJP,EAAQO,EAAKpB,MACbgB,EAAUF,EAAAA,EAAAA,aAEXO,OAAM,SAAAC,GACLN,EAAUF,EAAAA,EAAAA,eAEb,CAACH,KAGF,gCACGI,IAAWD,EAAAA,EAAAA,UAAkB,SAACS,EAAA,EAAD,IAE7BR,IAAWD,EAAAA,EAAAA,WAAmB,SAAC,EAAD,CAAWd,KAAMA,IAE/Ce,IAAWD,EAAAA,EAAAA,WACV","sources":["webpack://react-homework-template/./src/components/CardsCast/CardsCast.module.css?1987","components/CardsCast/CardsCast.jsx","views/Cast.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Wrap\":\"CardsCast_Wrap__gN2O7\",\"List\":\"CardsCast_List__prfDx\",\"Item\":\"CardsCast_Item__ejNOz\",\"Img\":\"CardsCast_Img__lzJV6\",\"Name\":\"CardsCast_Name__vXFR3\",\"Character\":\"CardsCast_Character__G7XME\"};","import PropTypes from 'prop-types';\nimport s from './CardsCast.module.css';\n\nconst PATH_IMAGE = 'https://image.tmdb.org/t/p/w1280';\nconst defaultImage =\n  'https://cdn.pixabay.com/photo/2016/04/01/10/11/avatar-1299805__340.png';\n\nconst CardsCast = ({ cast }) => {\n  return (\n    <>\n      {cast.length === 0 ? (\n        <p>There is no information about the cast...</p>\n      ) : (\n        <div className={s.Wrap}>\n          <ul className={s.List}>\n            {cast.map(({ cast_id, profile_path, name, character }) => (\n              <li key={cast_id} className={s.Item}>\n                <img\n                  src={profile_path ? PATH_IMAGE + profile_path : defaultImage}\n                  alt={name}\n                  className={s.Img}\n                />\n                <div>\n                  <p className={s.Name}>{name}</p>\n                  <p className={s.Character}>Chracter: {character}</p>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </>\n  );\n};\n\nCardsCast.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      cast_id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default CardsCast;\n","import PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { getMoviesInfo } from 'service/api';\n\nimport { Status } from 'helpers/helpers';\nimport Loader from 'components/Loader';\nimport CardsCast from 'components/CardsCast';\n\nconst PARAMS = 'credits';\n\nconst Cast = ({ movieId }) => {\n  const [cast, setCast] = useState(null);\n  const [status, setStatus] = useState(Status.IDLE);\n\n  useEffect(() => {\n    setStatus(Status.PENDING);\n    getMoviesInfo(movieId, PARAMS)\n      .then(data => {\n        setCast(data.cast);\n        setStatus(Status.RESOLVED);\n      })\n      .catch(error => {\n        setStatus(Status.RESOLVED);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {status === Status.PENDING && <Loader />}\n\n      {status === Status.RESOLVED && <CardsCast cast={cast} />}\n\n      {status === Status.REJECTED && (\n        <p>There is no information about the cast...</p>\n      )}\n    </>\n  );\n};\n\nCast.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n\nexport default Cast;\n"],"names":["cast","length","className","s","map","cast_id","profile_path","name","character","src","alt","movieId","useState","setCast","Status","status","setStatus","useEffect","getMoviesInfo","then","data","catch","error","Loader"],"sourceRoot":""}